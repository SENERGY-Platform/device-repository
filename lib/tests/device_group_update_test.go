/*
 * Copyright 2025 InfAI (CC SES)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package tests

import (
	"context"
	"github.com/SENERGY-Platform/device-repository/lib"
	"github.com/SENERGY-Platform/device-repository/lib/client"
	"github.com/SENERGY-Platform/device-repository/lib/configuration"
	"github.com/SENERGY-Platform/device-repository/lib/tests/docker"
	"github.com/SENERGY-Platform/models/go/models"
	"reflect"
	"sync"
	"testing"
	"time"
)

// largely generated by AI to try AI workflow
func TestDeviceGroupCriteriaUpdateOnDeviceTypeUpdate(t *testing.T) {
	wg := &sync.WaitGroup{}
	defer wg.Wait()
	ctx, cancel := context.WithCancel(context.Background())
	defer cancel()

	config, err := configuration.Load("./../../config.json")
	if err != nil {
		t.Error(err)
		return
	}

	config.SyncLockDuration = time.Second.String()
	config.Debug = true
	config.DisableStrictValidationForTesting = true

	config, err = docker.NewEnv(ctx, wg, config)
	if err != nil {
		t.Error(err)
		return
	}
	time.Sleep(1 * time.Second)

	err = lib.Start(ctx, wg, config)
	if err != nil {
		t.Error(err)
		return
	}
	time.Sleep(1 * time.Second)

	c := client.NewClient("http://localhost:"+config.ServerPort, nil)

	// Create base elements
	t.Run("create base elements", func(t *testing.T) {
		// Create Characteristics
		characteristics := []models.Characteristic{
			{
				Id:   "urn:test:characteristic:temperature",
				Name: "temperature",
				Type: models.Float,
			},
			{
				Id:   "urn:test:characteristic:humidity",
				Name: "humidity",
				Type: models.Float,
			},
			{
				Id:   "urn:test:characteristic:brightness",
				Name: "brightness",
				Type: models.Integer,
			},
		}
		for _, char := range characteristics {
			_, err, _ := c.SetCharacteristic(client.InternalAdminToken, char)
			if err != nil {
				t.Error(err)
				return
			}
		}

		// Create Concepts
		concepts := []models.Concept{
			{
				Id:                "urn:test:concept:temperature",
				Name:              "temperature",
				CharacteristicIds: []string{characteristics[0].Id},
			},
			{
				Id:                "urn:test:concept:humidity",
				Name:              "humidity",
				CharacteristicIds: []string{characteristics[1].Id},
			},
			{
				Id:                "urn:test:concept:brightness",
				Name:              "brightness",
				CharacteristicIds: []string{characteristics[2].Id},
			},
		}
		for _, concept := range concepts {
			_, err, _ = c.SetConcept(client.InternalAdminToken, concept)
			if err != nil {
				t.Error(err)
				return
			}
		}

		// Create Functions
		functions := []models.Function{
			{
				Id:        "urn:test:function:get-temperature",
				Name:      "get-temperature",
				ConceptId: concepts[0].Id,
				RdfType:   models.SES_ONTOLOGY_MEASURING_FUNCTION,
			},
			{
				Id:        "urn:test:function:get-humidity",
				Name:      "get-humidity",
				ConceptId: concepts[1].Id,
				RdfType:   models.SES_ONTOLOGY_MEASURING_FUNCTION,
			},
			{
				Id:        "urn:test:function:get-brightness",
				Name:      "get-brightness",
				ConceptId: concepts[2].Id,
				RdfType:   models.SES_ONTOLOGY_MEASURING_FUNCTION,
			},
			{
				Id:        "urn:test:function:set-brightness",
				Name:      "set-brightness",
				ConceptId: concepts[2].Id,
				RdfType:   models.SES_ONTOLOGY_CONTROLLING_FUNCTION,
			},
		}
		for _, function := range functions {
			_, err, _ = c.SetFunction(client.InternalAdminToken, function)
			if err != nil {
				t.Error(err)
				return
			}
		}

		// Create Aspects
		aspects := []models.Aspect{
			{
				Id:   "urn:test:aspect:environmental",
				Name: "environmental",
			},
			{
				Id:   "urn:test:aspect:lighting",
				Name: "lighting",
			},
		}
		for _, aspect := range aspects {
			_, err, _ = c.SetAspect(client.InternalAdminToken, aspect)
			if err != nil {
				t.Error(err)
				return
			}
		}

		// Create Device-Classes
		deviceClasses := []models.DeviceClass{
			{
				Id:   "urn:test:device-class:environmental-sensor",
				Name: "environmental sensor",
			},
			{
				Id:   "urn:test:device-class:light",
				Name: "light",
			},
		}
		for _, dc := range deviceClasses {
			_, err, _ = c.SetDeviceClass(client.InternalAdminToken, dc)
			if err != nil {
				t.Error(err)
				return
			}
		}

		// Create Protocol
		protocol := models.Protocol{
			Id:   "urn:test:protocol:mqtt",
			Name: "mqtt",
		}
		_, err, _ = c.SetProtocol(client.InternalAdminToken, protocol)
		if err != nil {
			t.Error(err)
			return
		}
	})

	// Create and test device types and groups
	t.Run("create and test device types and groups", func(t *testing.T) {
		// Create Device-Types
		deviceTypes := []models.DeviceType{
			{
				Id:            "urn:test:device-type:temp-humid-sensor",
				Name:          "temperature humidity sensor",
				DeviceClassId: "urn:test:device-class:environmental-sensor",
				Services: []models.Service{
					{
						Id:          "urn:test:service:temp-reading",
						Name:        "temperature reading",
						Interaction: models.REQUEST,
						ProtocolId:  "urn:test:protocol:mqtt",
						Outputs: []models.Content{
							{
								ContentVariable: models.ContentVariable{
									AspectId:   "urn:test:aspect:environmental",
									FunctionId: "urn:test:function:get-temperature",
								},
							},
						},
					},
					{
						Id:          "urn:test:service:humid-reading",
						Name:        "humidity reading",
						Interaction: models.REQUEST,
						ProtocolId:  "urn:test:protocol:mqtt",
						Outputs: []models.Content{
							{
								ContentVariable: models.ContentVariable{
									AspectId:   "urn:test:aspect:environmental",
									FunctionId: "urn:test:function:get-humidity",
								},
							},
						},
					},
				},
			},
			{
				Id:            "urn:test:device-type:smart-light",
				Name:          "smart light",
				DeviceClassId: "urn:test:device-class:light",
				Services: []models.Service{
					{
						Id:          "urn:test:service:brightness-control",
						Name:        "brightness control",
						Interaction: models.REQUEST,
						ProtocolId:  "urn:test:protocol:mqtt",
						Inputs: []models.Content{
							{
								ContentVariable: models.ContentVariable{
									AspectId:   "urn:test:aspect:lighting",
									FunctionId: "urn:test:function:set-brightness",
								},
							},
						},
					},
					{
						Id:          "urn:test:service:brightness-state",
						Name:        "brightness state",
						Interaction: models.EVENT,
						ProtocolId:  "urn:test:protocol:mqtt",
						Outputs: []models.Content{
							{
								ContentVariable: models.ContentVariable{
									AspectId:   "urn:test:aspect:lighting",
									FunctionId: "urn:test:function:get-brightness",
								},
							},
						},
					},
				},
			},
		}

		for _, dt := range deviceTypes {
			_, err, _ := c.SetDeviceType(client.InternalAdminToken, dt, client.DeviceTypeUpdateOptions{})
			if err != nil {
				t.Error(err)
				return
			}
		}

		// Create Devices
		devices := []models.Device{
			{
				Id:           "urn:test:device:sensor-1",
				Name:         "sensor 1",
				DeviceTypeId: deviceTypes[0].Id,
			},
			{
				Id:           "urn:test:device:sensor-2",
				Name:         "sensor 2",
				DeviceTypeId: deviceTypes[0].Id,
			},
			{
				Id:           "urn:test:device:light-1",
				Name:         "light 1",
				DeviceTypeId: deviceTypes[1].Id,
			},
		}

		for _, device := range devices {
			_, err, _ = c.SetDevice(client.InternalAdminToken, device, client.DeviceUpdateOptions{})
			if err != nil {
				t.Error(err)
				return
			}
		}

		// Create Device-Groups
		deviceGroups := []models.DeviceGroup{
			{
				Id:        "urn:test:device-group:temperature-sensors",
				Name:      "temperature sensors",
				DeviceIds: []string{devices[0].Id, devices[1].Id},
				Criteria: []models.DeviceGroupFilterCriteria{
					{
						FunctionId:    "urn:test:function:get-temperature",
						AspectId:      "urn:test:aspect:environmental",
						Interaction:   models.REQUEST,
						DeviceClassId: "urn:test:device-class:environmental-sensor",
					},
				},
			},
			{
				Id:        "urn:test:device-group:humidity-sensors",
				Name:      "humidity sensors",
				DeviceIds: []string{devices[0].Id, devices[1].Id},
				Criteria: []models.DeviceGroupFilterCriteria{
					{
						FunctionId:    "urn:test:function:get-humidity",
						AspectId:      "urn:test:aspect:environmental",
						Interaction:   models.REQUEST,
						DeviceClassId: "urn:test:device-class:environmental-sensor",
					},
				},
			},
			{
				Id:        "urn:test:device-group:lights",
				Name:      "lights",
				DeviceIds: []string{devices[2].Id},
				Criteria: []models.DeviceGroupFilterCriteria{
					{
						FunctionId:    "urn:test:function:set-brightness",
						AspectId:      "urn:test:aspect:lighting",
						Interaction:   models.REQUEST,
						DeviceClassId: "urn:test:device-class:light",
					},
				},
			},
		}

		for _, group := range deviceGroups {
			_, err, _ = c.SetDeviceGroup(client.InternalAdminToken, group)
			if err != nil {
				t.Error(err)
				return
			}
		}

		// Update Device-Type to trigger changes
		modifiedType := deviceTypes[0]
		// Remove AspectId from temperature service but keep it for humidity
		modifiedType.Services[0].Outputs[0].ContentVariable.AspectId = ""
		_, err, _ = c.SetDeviceType(client.InternalAdminToken, modifiedType, client.DeviceTypeUpdateOptions{})
		if err != nil {
			t.Error(err)
			return
		}

		// Wait for updates to propagate
		time.Sleep(2 * time.Second)

		// Check groups that should be affected
		tempGroup, err, _ := c.ReadDeviceGroup(deviceGroups[0].Id, client.InternalAdminToken, false)
		if err != nil {
			t.Error(err)
			return
		}
		if tempGroup.Criteria[0].AspectId != "" {
			t.Error("temperature group criteria should have empty AspectId after update")
			return
		}

		if !reflect.DeepEqual(tempGroup.Criteria, []models.DeviceGroupFilterCriteria{
			{
				Interaction:   models.REQUEST,
				FunctionId:    "urn:test:function:get-humidity",
				AspectId:      "",
				DeviceClassId: "urn:test:device-class:environmental-sensor",
			}, {
				Interaction:   models.REQUEST,
				FunctionId:    "urn:test:function:get-temperature",
				AspectId:      "",
				DeviceClassId: "urn:test:device-class:environmental-sensor",
			},
		}) {
			t.Errorf("temperature group criteria should have updated criteria \n%#v\n", tempGroup.Criteria)
			return
		}

		// Check groups that should NOT be affected
		humidityGroup, err, _ := c.ReadDeviceGroup(deviceGroups[1].Id, client.InternalAdminToken, false)
		if err != nil {
			t.Error(err)
			return
		}
		if humidityGroup.Criteria[0].AspectId != "" {
			t.Error("humidity group criteria should have empty AspectId after update")
			return
		}

		if !reflect.DeepEqual(humidityGroup.Criteria, []models.DeviceGroupFilterCriteria{
			{
				Interaction:   models.REQUEST,
				FunctionId:    "urn:test:function:get-humidity",
				AspectId:      "",
				DeviceClassId: "urn:test:device-class:environmental-sensor",
			}, {
				Interaction:   models.REQUEST,
				FunctionId:    "urn:test:function:get-temperature",
				AspectId:      "",
				DeviceClassId: "urn:test:device-class:environmental-sensor",
			},
		}) {
			t.Errorf("humidity group criteria should have updated criteria \n%#v\n", humidityGroup.Criteria)
			return
		}

		lightGroup, err, _ := c.ReadDeviceGroup(deviceGroups[2].Id, client.InternalAdminToken, false)
		if err != nil {
			t.Error(err)
			return
		}
		if lightGroup.Criteria[0].AspectId != "urn:test:aspect:lighting" {
			t.Error("light group criteria should maintain its AspectId")
			return
		}
		if !reflect.DeepEqual(lightGroup.Criteria, []models.DeviceGroupFilterCriteria{{
			FunctionId:    "urn:test:function:set-brightness",
			AspectId:      "urn:test:aspect:lighting",
			Interaction:   models.REQUEST,
			DeviceClassId: "urn:test:device-class:light",
		}}) {
			t.Errorf("light group criteria should maintain its AspectId \n%#v\n", lightGroup.Criteria)
			return
		}

	})
}
